<?xml version="1.0" encoding="UTF-8"?>
<launch>
    <!-- Launch arguments -->
    <!-- SAMROS arguments -->
    <arg name="start_samros" default="true" doc="Start SAMROS"/>
    <arg name="search_text" default="[a door]" doc="Text prompt for SAM"/>

    <!-- MAVROS arguments -->
    <arg name="start_mavros" default="false" doc="Start MAVROS"/>
    <arg name="fcu_url" default="/dev/ttyTHS0:921600" doc="FCU connection URL"/>
    <arg name="gcs_url" default="udp-l://192.168.17.11" doc="GCS URL"/>
    <arg name="tgt_system" default="11" doc="Target system ID"/>
    <arg name="tgt_component" default="1" doc="Target component ID"/>

    <!-- Visualization arguments -->
    <arg name="start_rviz" default="true" doc="Start RViz"/>
    <arg name="rviz_config" default="$(find sam_fp)/rviz/traverse.rviz" doc="RViz config file"/>

    <!-- Door Traverse node arguments -->
    <arg name="start_traverse" default="false" doc="Start traverse node"/>

    <!-- Launch MAVROS -->
    <include if="$(arg start_mavros)" file="$(find mavros)/launch/px4.launch">
        <arg name="fcu_url" value="$(arg fcu_url)"/>
        <arg name="gcs_url" value="$(arg gcs_url)"/>
        <arg name="tgt_system" value="$(arg tgt_system)"/>
        <arg name="tgt_component" value="$(arg tgt_component)"/>
    </include>

    <!-- Include camera launch file -->
    <include if="$(arg start_samros)" file="$(find sam_fp)/launch/realsense.launch">
        <arg name="search_text" value="$(arg search_text)"/>
        <arg name="start_rviz" value="$(arg start_rviz)"/>
        <arg name="rviz_config" value="$(arg rviz_config)"/>
    </include>

    <!-- Door traverse node -->
    <node if="$(arg start_traverse)" name="door_traverse_node" pkg="sam_fp" type="mavros.py" output="screen">
        <!-- Parameters inherited from mavros.py -->
    </node>

    <!-- TF tree configuration -->
    <!-- Static transform from map to world -->
    <node pkg="tf" type="static_transform_publisher" name="map_transform"
          args="0 0 0 0 0 0 map world 100"/>

    <!-- Static transform from body to base_link -->
    <node pkg="tf" type="static_transform_publisher" name="body_transform"
          args="0 0 0 0 0 0 body base_link 100"/>

    <!-- Static transform from base_link to camera -->
    <node pkg="tf" type="static_transform_publisher" name="camera_transform"
          args="0.1 0 0.05 0 0 0 base_link $(arg camera_frame) 100"/>

    <!-- Optional: Add diagnostics aggregator for system health monitoring -->
    <node pkg="diagnostic_aggregator" type="aggregator_node" name="diagnostic_aggregator">
        <rosparam command="load" file="$(find sam_fp)/config/diagnostics.yaml"/>
    </node>
</launch>
